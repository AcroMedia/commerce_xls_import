<?php

/**
 * @file
 * Commerce_xls_import.test.
 *
 * Tests.
 */

/**
 * Class CommerceXlsImportTestCase.
 */
class CommerceXlsImportTestCase extends CommerceBaseTestCase {
  protected $adminUser;
  protected $privilegedUser;
  protected $normalUser;

  /**
   * GetInfo().
   *
   * @return array
   *  An array containing name, description, and group text.
   */
  public static function getInfo() {
    return array(
      'name' => 'Commerce XLS Import Tests',
      'description' => 'Ensure Commerce XLS Import functions properly',
      'group' => 'Drupal Commerce XLS Import',
    );
  }

  /**
   * Setup().
   * @{inheritdoc}
   */
  public function setUp() {
    $modules = parent::setUpHelper('all', array('commerce_xls_import'));
    parent::setUp($modules);

    // Create a dummy product display content type.
    $this->createDummyProductDisplayContentType();

    // Many of the following values will be defaulted, they're included here as an illustrative examples.
    // See http://api.drupal.org/api/function/field_create_instance/7
    $instance = array(
      'field_name' => 'field_image',
      'entity_type' => 'commerce_product',
      'label' => 'Image',
      'bundle' => 'product',
      'description' => t('Upload an image to go with this product display.'),
      'required' => FALSE,
    );
    field_create_instance($instance);

    $this->adminUser = $this->drupalCreateUser(array(
      'administer users',
      'administer permissions',
    ));

    $this->privilegedUser = $this->drupalCreateUser(array(
      'administer commerce import',
      'administer commerce_product entities',
    ));

    $this->normalUser = $this->drupalCreateUser();
  }

  /**
   * Test permissions.
   */
  public function testCommerceXlsImportPermissions() {
    $this->drupalLogin($this->privilegedUser);
    $this->drupalGet('admin/commerce/products/import_commerce');
    $this->assertResponse('200', 'Privileged user was able to correctly access the admin page');

    $this->drupalLogin($this->normalUser);
    $this->drupalGet('admin/commerce/products/import_commerce');
    $this->assertResponse('403', 'Unprivileged user was unable to access the admin page');
  }

  /**
   * Test product types
   */
  public function testCommerceXlsImportProductTypes() {
    $this->drupalLogin($this->privilegedUser);
    $this->drupalGet('admin/commerce/products/import_commerce');
    $this->assertFieldByXPath("//select[@name='product_type']/option[@value='product']", 'Product', 'Product type \'Product\' found');
  }

  /**
   * Test xls upload
   */
  public function testCommerceXlsImportUpload() {
    $this->drupalLogin($this->privilegedUser);

    $edit = array(
      'display_type' => 'product_display',
      'files[import_file]' => drupal_get_path('module', 'commerce_xls_import') . '/sample_files/sample.xls',
      'files[product_images]' => drupal_get_path('module', 'commerce_xls_import') . '/sample_files/product_images.zip',
    );
    $this->drupalPost('admin/commerce/products/import_commerce', $edit, 'Validate File');
    $this->assertText('24 products successfully processed', 'Import file validation completed');
  }

  /**
   * Test xls import
   */
  public function testCommerceXlsImportImport() {
    $this->drupalLogin($this->privilegedUser);

    $edit = array(
      'display_type' => 'product_display',
      'files[import_file]' => drupal_get_path('module', 'commerce_xls_import') . '/sample_files/sample.xls',
      'files[product_images]' => drupal_get_path('module', 'commerce_xls_import') . '/sample_files/product_images.zip',
    );
    $this->drupalPost('admin/commerce/products/import_commerce', $edit, 'Begin Full Import');
    $this->assertText('24 products successfully processed', 'Import file processed');

    $this->drupalGet('admin/commerce/products');

    libraries_load('PHPExcel');
    module_load_include('inc', 'phpexcel', 'phpexcel');
    //Loop thru xls and check if all skus are in the product page, make sure #18 and above do not appear (no sku)
    $result = phpexcel_import(drupal_get_path('module', 'commerce_xls_import') . '/sample_files/sample.xls');
    foreach ($result[0] as $index => $row) {
      if ($index < 18) {
        //Valid Sku
        $this->assertText($row['sku'], $row['title'] . ':' . $row['sku'] . ' found');
      } else {
        //Invalid Sku
        $this->assertNoText($row['title'], $row['title'] . ':' . $row['sku'] . ' not found');
      }
    }
  }

  /**
   * Test xls export
   */
  public function testCommerceXlsImportExport() {
    // Create dummy product display nodes (and their corresponding product
    //  entities).
    $sku = 'PROD-01';
    $product_name = 'Product One';
    $product = $this->createDummyProduct($sku, $product_name);
    $product_node = $this->createDummyProductNode(array($product->product_id), $product_name);

    $this->drupalLogin($this->privilegedUser);
    $edit = array(
      'display_type' => 'product_display'
    );
    $this->drupalPost('admin/commerce/products/import_commerce/export', $edit, 'Begin Export');
    $this->assertText('The export completed successfully. Download the results now.', 'Export file generated');

    libraries_load('PHPExcel');
    module_load_include('inc', 'phpexcel', 'phpexcel');
    //Loop thru xls and check if all skus are in the product page, make sure #18 and above do not appear (no sku)
    $filepath = drupal_realpath(file_build_uri('export/commerce_xls_export_product_display.xlsx'));
    copy($filepath, '/var/www/drupalvm/drupal/sites/all/modules/commerce_xls_import/sample_files/commerce_xls_export_product_display.xlsx');
    $result = phpexcel_import($filepath);
    foreach ($result[0] as $index => $row) {
      $this->assertEqual($row['sku'], 'PROD-01', 'PROD-01 found in export file');
    }
  }
}
